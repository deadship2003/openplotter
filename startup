#!/usr/bin/env python3

# This file is part of Openplotter.
# Copyright (C) 2019 by sailoog <https://github.com/sailoog/openplotter>
#                     e-sailing <https://github.com/e-sailing/openplotter>
# Openplotter is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# any later version.
# Openplotter is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Openplotter. If not, see <http://www.gnu.org/licenses/>.

import wx, subprocess, time, os, threading, sys, platform, requests, configparser, io, re, ujson
import wx.richtext as rt
from shutil import copyfile
from classes.conf import Conf
from classes.language import Language
from classes.SK_settings import SK_settings
from classes.opencpnSettings import opencpnSettings

class MyFrame(wx.Frame):

	def __init__(self):

		self.conf = Conf()
		self.home = self.conf.home
		self.op_folder = self.conf.op_folder
		self.conf_folder = self.conf.conf_folder

		try:
			sk_defaults_file = self.home+'/.signalk/defaults.json'
			if os.path.isfile(sk_defaults_file):
				with open(sk_defaults_file) as data_file:
					data = ujson.load(data_file)
				if 'vessels' in data:
					if 'self' in data['vessels']:
						if 'uuid' in data['vessels']['self']:
							if data['vessels']['self']['uuid'] == 'urn:mrn:signalk:uuid:00000000-0000-0000-0000-000000000000':
								data['vessels']['self']['uuid'] = 'urn:mrn:signalk:uuid:'+subprocess.check_output('uuid')
								data2 = ujson.dumps(data, indent=4, sort_keys=True)
								try:
									with open(sk_defaults_file, 'w') as defile:
										data2.write(defile)
								except: pass
								subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.service'])
								subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.socket'])
								subprocess.call(['sudo', 'systemctl', 'start', 'signalk.socket'])
								subprocess.call(['sudo', 'systemctl', 'start', 'signalk.service'])
			else: print('Error: file ~/.signalk/defaults.json does not exist')
		except: pass
		try:
			private_unit_file_path = self.conf_folder+'/private_unit.json'
			if not os.path.isfile(private_unit_file_path):
				copyfile(self.op_folder+'/classes/private_unit.json', private_unit_file_path)
		except: pass
		try:
			if not os.path.exists(self.conf_folder+'/tools/demo_tool'):
				os.makedirs(self.conf_folder+'/tools/demo_tool')
			demo_tool_file_path = self.conf_folder+'/tools/demo_tool/demo_tool.py'
			if not os.path.isfile(demo_tool_file_path):
				copyfile(self.op_folder+'/tools/demo_tool/demo_tool.py', demo_tool_file_path)
			readme_tool_file_path = self.conf_folder+'/tools/README.md'
			if not os.path.isfile(readme_tool_file_path):
				copyfile(self.op_folder+'/tools/README.md', readme_tool_file_path)
		except: pass
		try:
			if not os.path.exists(self.conf_folder+'/tools'):
				os.makedirs(self.conf_folder+'/tools')
			analog_file_path = self.conf_folder+'/tools/openplotter_analog.conf'
			if not os.path.isfile(analog_file_path):
				copyfile(self.op_folder+'/tools/openplotter_analog.conf', analog_file_path)
			install_analog_file_path = self.conf_folder+'/tools/install_analog.txt'
			if not os.path.isfile(install_analog_file_path):
				copyfile(self.op_folder+'/tools/install_analog.txt', install_analog_file_path)
		except: pass

		Language(self.conf)

		self.ttimer=100
		self.logger_data=False
		self.warnings_flag=False
		self.autoclose=0

		wx.Frame.__init__(self, None, title=_('Starting OpenPlotter'), style=wx.STAY_ON_TOP, size=(800,475))
		self.Bind(wx.EVT_CLOSE, self.OnClose)
		panel = wx.Panel(self, wx.ID_ANY)

		self.timer = wx.Timer(self)
		self.Bind(wx.EVT_TIMER, self.refresh, self.timer)

		self.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))

		self.icon = wx.Icon(self.op_folder+'/static/icons/openplotter.ico', wx.BITMAP_TYPE_ICO)
		self.SetIcon(self.icon)

		self.logger = rt.RichTextCtrl(panel, style=wx.TE_MULTILINE|wx.TE_READONLY|wx.TE_DONTWRAP|wx.LC_SORT_ASCENDING)
		self.logger.SetMargins((10,10))

		self.button_close =wx.Button(panel, label=_('Close'))
		self.button_close.Bind(wx.EVT_BUTTON, self.OnClose_button)
		self.button_close.Disable()

		htextbox = wx.BoxSizer(wx.HORIZONTAL)
		htextbox.Add(self.logger, 1, wx.ALL|wx.EXPAND, 5)

		hbox = wx.BoxSizer(wx.HORIZONTAL)
		hbox.Add(self.button_close, 0, wx.RIGHT|wx.LEFT, 5)

		vbox = wx.BoxSizer(wx.VERTICAL)
		vbox.Add(htextbox, 1, wx.ALL|wx.EXPAND, 0)
		vbox.Add(hbox, 0, wx.ALL|wx.EXPAND, 0)
		panel.SetSizer(vbox)

		self.CreateStatusBar()
		font_statusBar = self.GetStatusBar().GetFont()
		font_statusBar.SetWeight(wx.BOLD)
		self.GetStatusBar().SetFont(font_statusBar)
		self.SetStatusText(_('Starting OpenPlotter. Please wait for all services to start.'))
		self.Centre()
		self.Show(True)

		self.thread1=threading.Thread(target=self.starting)
		if not self.thread1.isAlive(): self.thread1.start()

		self.timer.Start(self.ttimer)

	def refresh(self,event):
		if self.logger_data:
			if self.logger_data[1] == 'b': 
				self.logger.BeginTextColour((55, 55, 55))
			elif self.logger_data[1] == 'g': 
				self.logger.BeginTextColour((0, 255, 0))
			elif self.logger_data[1] == 'r':
				self.logger.Newline()
				self.logger.BeginTextColour((255, 0, 0))
				self.warnings_flag = True
			self.logger.WriteText(self.logger_data[0])
			self.logger.EndTextColour()
			if self.logger_data[2] == 1: self.logger.Newline()
			self.logger_data = False
		if self.autoclose>0:
			if self.autoclose<time.time():
				self.destroy_window()
		if not self.thread1.isAlive():
			if not self.warnings_flag: self.destroy_window()
			else:
				self.button_close.Enable()
				self.GetStatusBar().SetForegroundColour(wx.RED)
				self.SetStatusText(_('There are some warnings. Please close this window and check your system.'))


	def add_logger_data(self, msg):
		while self.logger_data:
			time.sleep(0.1)
		self.logger_data=msg

	def starting(self):
		delay=float(self.conf.get('STARTUP', 'delay'))
		screensaver=self.conf.get('STARTUP', 'screensaver')
		opencpn=self.conf.get('STARTUP', 'opencpn')
		opencpn_no=self.conf.get('STARTUP', 'opencpn_no_opengl')
		opencpn_fullscreen=self.conf.get('STARTUP', 'opencpn_fullscreen')
		play=self.conf.get('STARTUP', 'play')
		sound=self.conf.get('STARTUP', 'sound')
		d800x480=self.conf.get('STARTUP', '800x480')
		ais_enable = self.conf.get('AIS-SDR', 'enable')
		ppm = self.conf.get('AIS-SDR', 'ppm')
		pypilot_mode = self.conf.get('PYPILOT', 'mode')
		webapp = self.conf.get('PYPILOT', 'webapp')
		webapp_port = self.conf.get('PYPILOT', 'webapp_port')
		N2K_output=self.conf.get('N2K', 'output')
		i2c = self.conf.get('I2C', 'sensors')
		onewire = self.conf.get('1W', 'ds18b20')
		spi = self.conf.get('SPI', 'mcp')

		tools_py=[]
		if self.conf.has_section('TOOLS'):
			if self.conf.has_option('TOOLS', 'py'):
				data=self.conf.get('TOOLS', 'py')
				try:
					temp_list=eval(data)
				except:temp_list=[]
				if type(temp_list) is list: pass
				else:   temp_list=[]
				for ii in temp_list:
					tools_py.append(ii)

		#######################################################

		subprocess.call(['pkill', '-f', '/openplotter/openplotter'])

		#TODO cada vegada comprovem que existeixen tots els nodes de les credencials

		######################################

		try:
			out = subprocess.check_output(['more','product'],cwd='/proc/device-tree/hat')
		except: pass
		else:
			if 'Moitessier' in out:
				self.add_logger_data([_('Checking Moitessier HAT setup...'),'b',0])
				if not os.path.isfile(self.home+'/moitessier/app/moitessier_ctrl/moitessier_ctrl'):
					self.add_logger_data([_('Moitessier HAT package is not installed!'),'r',1])
				else:
					package = subprocess.check_output(['dpkg','-s','moitessier'])
					kernel = subprocess.check_output(['uname','-r'])
					kernel = kernel.split('-')
					kernel = kernel[0]
					package = package.split('\n')
					for i in package:
						if 'Version:' in i:
							version = i.split(':')
							version = version[1]
							version = version.strip()
							version = version.split('-')
							version = version[2]
					if kernel != version:
						self.add_logger_data([_('The installed Moitessier HAT package does not match the kernel version.'),'r',1])
					else: self.add_logger_data([_(' Done.'),'g',1])

		######################################

		if platform.machine()[0:3]=='arm':
			self.add_logger_data([_('Checking pi password...'),'b',0])
			out = subprocess.check_output(['sudo', '-n', 'grep', '-E', '^pi:', '/etc/shadow']).decode()
			tmp = out.split(':')
			passw_a = tmp[1]
			tmp = passw_a.split('$')
			salt = tmp[2]
			passw_b = subprocess.check_output(['mkpasswd', '-msha-512', 'raspberry', salt]).decode()
			if passw_a.rstrip() == passw_b.rstrip():
				self.add_logger_data([_('Security warning: You are using the default password for "pi" user (raspberry).\nPlease change password in Menu > Preferences > Raspberry Pi Configuration.'),'r',1])
			else: self.add_logger_data([_(' Done.'),'g',1])

		######################################

		wifi_default = self.conf_folder + '/Network/default'
		if not os.path.isdir(wifi_default):
			self.add_logger_data([_('Checking WIFI Access Point password...'),'b',0])
			wifi_pass = ''
			try:
				hostapd = open('/etc/hostapd/hostapd.conf', 'r')
				data = hostapd.read()
				hostapd.close()
				i=data.find("wpa_passphrase")
				if i>=0:
					j=data[i:].find("\n")
					if j==0:j=data[i:].length
					line = data[i:i+j]
					sline = line.split('=')
					if len(sline)>1:
						wifi_pass=sline[1]
			except: pass
			if wifi_pass == '12345678':
				self.add_logger_data([_('Security warning: You are using the default WIFI Access Point password.\nPlease change password in OpenPlotter > Network.'),'r',1])
			else: self.add_logger_data([_(' Done.'),'g',1])

		######################################

		if screensaver == '1':
			subprocess.call(['xset', 's', 'noblank'])
			subprocess.call(['xset', 's', 'off'])
			subprocess.call(['xset', '-dpms'])
			self.add_logger_data([_('Screen saver disabled.'),'b',0])
			self.add_logger_data([_(' Done.'),'g',1])
		else:
			subprocess.call(['xset', 's', 'blank'])
			subprocess.call(['xset', 's', 'on'])
			subprocess.call(['xset', '+dpms'])
			self.add_logger_data([_('Screen saver enabled.'),'b',0])
			self.add_logger_data([_(' Done.'),'g',1])

		######################################

		if delay!=0:
			self.add_logger_data([_('Applying ')+str(delay)+_(' seconds of delay...'),'b',0])
			time.sleep(delay)
			self.add_logger_data([_(' Done.'),'g',1])

		######################################

		subprocess.call(['pkill', '-f', 'diagnostic-N2K-output.py'])
		subprocess.call(['pkill', '-f', 'diagnostic-N2K-input.py'])
		subprocess.call(['pkill', '-f', 'N2K-server_d.py'])
		subprocess.call(['pkill', '-f', 'SK-base_d.py'])
		if N2K_output == '1':
			self.add_logger_data([_('Starting N2K server...'),'b',0])
			subprocess.Popen(['python3', self.op_folder+'/N2K-server_d.py'])
			self.check_start('N2K-server_d.py')
			self.add_logger_data([_('Starting N2K generator...'),'b',0])
			subprocess.Popen(['python3', self.op_folder+'/SK-base_d.py'])
			self.check_start('SK-base_d.py')

		######################################

		subprocess.call(['pkill', '-f', 'read_sensors_d.py'])
		spiEnabled = False
		try:
			temp_list = eval(spi)
		except:
			temp_list = []
		for i in temp_list:
			if i[0] == 1: spiEnabled = True
		if i2c: i2c = eval(i2c)
		if spiEnabled or i2c or pypilot_mode == 'imu' or  pypilot_mode == 'basic autopilot':
			self.add_logger_data([_('Starting I2C, SPI or pypilot sensors...'),'b',0])
			subprocess.Popen(['python', self.op_folder+'/read_sensors_d.py'], cwd=self.home + '/.pypilot')
			self.check_start('read_sensors_d.py')

		######################################

		subprocess.call(['pkill', '-f', 'pypilot_webapp'])
		if webapp == '1' and pypilot_mode == 'basic autopilot':
			self.add_logger_data([_('Starting pypilot Web App...'),'b',0])
			try: subprocess.Popen(['pypilot_webapp', webapp_port])
			except: pass
			self.check_start('pypilot_webapp')

		######################################

		subprocess.call(['pkill', '-f', '1w_d.py'])
		if onewire: onewire = eval(onewire)
		if onewire:
			self.add_logger_data([_('Starting 1W sensors...'),'b',0])
			subprocess.Popen(['python3', self.op_folder+'/1w_d.py'])
			self.check_start('1w_d.py')

		######################################

		subprocess.call(['pkill', '-15', 'rtl_ais'])
		subprocess.call(['pkill', '-f', 'SDR_AIS_fine_cal.py'])
		subprocess.call(['pkill', '-15', 'rtl_test'])
		subprocess.call(['pkill', '-15', 'kal'])
		subprocess.call(['pkill', '-15', 'gqrx'])
		if ais_enable == '1':
			self.add_logger_data([_('Starting SDR AIS reception...'),'b',0])
			subprocess.Popen(['rtl_ais', '-R', '-p', ppm])
			self.check_start('rtl_ais')

		######################################

		if d800x480 == '1':
			self.add_logger_data([_('Checking 800x480 display...'),'b',0])
			subprocess.call(['sudo', 'python3', self.op_folder+'/display800x480.py'])
			self.add_logger_data([_(' Done.'),'g',1])

		######################################

		subprocess.call(['pkill', '-15', 'opencpn'])
		if opencpn=='1':
			self.add_logger_data([_('Starting OpenCPN...'),'b',0])
			opencpn_commands = ['opencpn']
			if opencpn_no=='1': opencpn_commands.append('-no_opengl')
			if opencpn_fullscreen=='1': opencpn_commands.append('-fullscreen')
			if len(opencpn_commands)>1: subprocess.Popen(opencpn_commands)
			if len(opencpn_commands)==1: subprocess.Popen('opencpn')
			self.check_start('opencpn')

		######################################

		self.add_logger_data([_('Starting Tools...'),'b',0])
		index=0
		for i in tools_py:
			folder = tools_py[index][2]
			file = folder+'.py'
			if i[3]=='1':
				subprocess.call(['pkill', '-9', file])
				if os.path.isfile(self.conf_folder+'/tools/'+folder+'/'+file):
					subprocess.Popen(['python3',self.conf_folder+'/tools/'+folder+'/'+file])
				else:
					subprocess.Popen(['python3',self.op_folder+'/tools/'+folder+'/'+file])
			index+=1
		self.add_logger_data([_(' Done.'),'g',1])

		######################################

		self.add_logger_data([_('Checking Signal K connections...'),'b',0])
		self.SK_settings = SK_settings(self.conf)
		if self.SK_settings.setSKsettings():
			subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.service'])
			subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.socket'])
			subprocess.call(['sudo', 'systemctl', 'start', 'signalk.socket'])
			subprocess.call(['sudo', 'systemctl', 'start', 'signalk.service'])
		self.check_start('signalk-server')

		######################################

		self.add_logger_data([_('Checking OpenCPN connections...'),'b',0])
		self.opencpnSettings = opencpnSettings()
		opencpnConnection = self.opencpnSettings.getConnectionState()
		if not opencpnConnection:
			self.add_logger_data([_('The default OpenCPN connection is missing: input TCP localhost:10110.\nSome features may not work as expected.'),'r',1])
		elif opencpnConnection == 'disabled':
			self.add_logger_data([_('The default OpenCPN connection is disabled: input TCP localhost:10110.\nSome features may not work as expected.'),'r',1])
		self.add_logger_data([_(' Done.'),'g',1])

		######################################

		subprocess.call(['pkill', '-f', 'diagnostic-NMEA.py'])
		subprocess.call(['pkill', '-f', 'kplex.py'])
		subprocess.call(['pkill', '-15', 'kplex'])
		startKplex = False
		try:
			file = open(self.home + '/.kplex.conf', 'r')
			data = file.readlines()
			file.close()
			for item in data:
				if re.search('\[*\]', item):
					if not '#[' in item: startKplex = True
		except: pass
		if startKplex:
			self.add_logger_data([_('Starting kplex...'),'b',0])
			subprocess.Popen('kplex')
			self.check_start('kplex')

		######################################

		self.add_logger_data([_('Checking OpenPlotter updates...'),'b',1])

		vl = self.conf.get('GENERAL', 'version')
		sl = self.conf.get('GENERAL', 'state')
		vl_list = vl.split('.')
		local_xxx = int(vl_list[0])
		local_oxx = int(vl_list[1])
		local_oox = int(vl_list[2])
		master_github_repositories = self.conf.get('UPDATE', 'master_github_repositories')
		stable_branch = self.conf.get('UPDATE', 'stable_branch')
		beta_branch = self.conf.get('UPDATE', 'beta_branch')
		print(1,master_github_repositories,stable_branch,beta_branch)

		try:
			r_stable = requests.get('https://raw.githubusercontent.com/'+master_github_repositories+'/openplotter/'+stable_branch+'/openplotter.conf')
			r_beta = requests.get('https://raw.githubusercontent.com/'+master_github_repositories+'/openplotter/'+beta_branch+'/openplotter.conf')
			print(2,r_stable,r_beta)
		except:
			self.add_logger_data([_('It was not possible to connect to Github.'),'b',1])
		else:
			data_conf = configparser.ConfigParser()
			try:
				data_conf.read_string(r_stable.text)
				vr = data_conf.get('GENERAL','version')
				sr = data_conf.get('GENERAL','state')
				print(5,vr,sr)
				vr_list = vr.split('.')
				remote_xxx = int(vr_list[0])
				remote_oxx = int(vr_list[1])
				remote_oox = int(vr_list[2])
			except:
				self.add_logger_data([_('Error reading versions.'),'b',1])
			else:
				check_beta = True
				if remote_xxx > local_xxx: check_beta = False
				elif remote_xxx == local_xxx and remote_oxx > local_oxx: check_beta = False
				elif remote_xxx == local_xxx and remote_oxx == local_oxx and remote_oox > local_oox: check_beta = False
				if check_beta:
					try:
						data_conf = configparser.ConfigParser()
						data_conf.read_string(r_beta.text)
						#data_conf.read(io.StringIO(r_beta.text))
						vr = data_conf.get('GENERAL','version')
						sr = data_conf.get('GENERAL','state')
						vr_list = vr.split('.')
						remote_xxx = int(vr_list[0])
						remote_oxx = int(vr_list[1])
						remote_oox = int(vr_list[2])
					except:
						self.add_logger_data([_('Error reading versions.'),'b',1])
				if sr == 'stable': branch = stable_branch
				else: branch = beta_branch
				if remote_xxx > local_xxx:
					self.add_logger_data([_('There is a major Raspbian upgrade, you have to download\nthe new OpenPlotter image: v')+str(remote_xxx)+'.x.x '+sr+'.','b',1])
					self.add_logger_data([_('See CHANGELOG:'),'b',1])
					self.add_logger_data(['https://raw.githubusercontent.com/'+master_github_repositories+'/openplotter/'+branch+'/CHANGELOG.md','b',1])
				elif remote_xxx == local_xxx and remote_oxx > local_oxx:
					self.add_logger_data([_('There is a major OpenPlotter update: ')+vl+' '+sl+' --> '+vr+' '+sr+'.','b',1])
					self.add_logger_data([_('See CHANGELOG:'),'b',1])
					self.add_logger_data(['https://raw.githubusercontent.com/'+master_github_repositories+'/openplotter/'+branch+'/CHANGELOG.md','b',1])
				elif remote_xxx == local_xxx and remote_oxx == local_oxx and remote_oox > local_oox:
					self.add_logger_data([_('There is a minor OpenPlotter update: ')+vl+' '+sl+' --> '+vr+' '+sr+'.','b',1])
					self.add_logger_data([_('See CHANGELOG:'),'b',1])
					self.add_logger_data(['https://raw.githubusercontent.com/'+master_github_repositories+'/openplotter/'+branch+'/CHANGELOG.md','b',1])
				else:
					self.add_logger_data([' OpenPlotter '+vl+' '+sl+_(' is up to date.'),'g',1])

		######################################

		subprocess.call(['pkill', '-9', 'omxplayer'])
		if play == '1':
			if sound: subprocess.Popen(['omxplayer', '-o','both', sound])

		######################################
		
		self.autoclose=time.time() + 60

	def OnClose(self, event):
		pass

	def OnClose_button(self, event):
		self.destroy_window()

	def destroy_window(self):
		self.timer.Stop()
		self.Destroy()

	def check_start(self,process):
		time.sleep(2)
		if util_process_exist(process):
			self.add_logger_data([_(' Done.'),'g',1])
		else:
			self.add_logger_data([_(' Not Started.'),'b',1])


def util_process_exist(process_name):
	test = subprocess.check_output(['ps','aux']).decode()
	if process_name in test:
		return True
	else:
		return False

def print_help():
	print('This is a part of OpenPlotter software')
	print('It starts all needed server/services/background processes')
	print('Options are:')
	print('startup start      (does only run on X display desktop)')
	print('startup restart    (does only run on X display desktop)')
	print('startup stop')
	print('this: startup -h')

#to debug in idle with argv
sys.argv = ['','restart']

if len(sys.argv)>1:
	if sys.argv[1]=='stop':
		subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.service'])
		subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.socket'])
		subprocess.call(['pkill', '-15', 'opencpn'])
		subprocess.call(['pkill', '-15', 'kplex'])
		#SDR
		subprocess.call(['pkill', '-15', 'rtl_ais'])
		subprocess.call(['pkill', '-f', 'SDR_AIS_fine_cal.py'])
		subprocess.call(['pkill', '-15', 'rtl_test'])
		subprocess.call(['pkill', '-15', 'kal'])
		subprocess.call(['pkill', '-15', 'gqrx'])

		subprocess.call(['pkill', '-f', '1w_d.py'])
		subprocess.call(['pkill', '-f', 'read_sensors_d.py'])
		subprocess.call(['pkill', '-f', 'pypilot_webapp'])
		subprocess.call(['pkill', '-f', 'SK-base_d.py'])
		subprocess.call(['pkill', '-f', 'N2K-server_d.py'])
		subprocess.call(['pkill', '-f', '/openplotter/openplotter'])
		subprocess.call(['killall', 'diagnostic-'])
	elif sys.argv[1]=='restart':
		subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.service'])
		subprocess.call(['sudo', 'systemctl', 'stop', 'signalk.socket'])
		subprocess.call(['sudo', 'systemctl', 'start', 'signalk.socket'])
		subprocess.call(['sudo', 'systemctl', 'start', 'signalk.service'])
		app = wx.App()
		MyFrame().Show()
		app.MainLoop()
	elif sys.argv[1]=='start':
		app = wx.App()
		MyFrame().Show()
		app.MainLoop()
	elif sys.argv[1]=='-h': print_help()
else: print_help()
